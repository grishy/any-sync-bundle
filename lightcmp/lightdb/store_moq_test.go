// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package lightdb

import (
	"context"
	"github.com/anyproto/any-sync/app"
	"github.com/dgraph-io/badger/v4"
	"sync"
)

// Ensure, that configServiceMock does implement configService.
// If this is not the case, regenerate this file with moq.
var _ configService = &configServiceMock{}

// configServiceMock is a mock implementation of configService.
//
//	func TestSomethingThatUsesconfigService(t *testing.T) {
//
//		// make and configure a mocked configService
//		mockedconfigService := &configServiceMock{
//			GetDBDirFunc: func() string {
//				panic("mock out the GetDBDir method")
//			},
//			InitFunc: func(a *app.App) error {
//				panic("mock out the Init method")
//			},
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//		}
//
//		// use mockedconfigService in code that requires configService
//		// and then make assertions.
//
//	}
type configServiceMock struct {
	// GetDBDirFunc mocks the GetDBDir method.
	GetDBDirFunc func() string

	// InitFunc mocks the Init method.
	InitFunc func(a *app.App) error

	// NameFunc mocks the Name method.
	NameFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// GetDBDir holds details about calls to the GetDBDir method.
		GetDBDir []struct {
		}
		// Init holds details about calls to the Init method.
		Init []struct {
			// A is the a argument value.
			A *app.App
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
	}
	lockGetDBDir sync.RWMutex
	lockInit     sync.RWMutex
	lockName     sync.RWMutex
}

// GetDBDir calls GetDBDirFunc.
func (mock *configServiceMock) GetDBDir() string {
	if mock.GetDBDirFunc == nil {
		panic("configServiceMock.GetDBDirFunc: method is nil but configService.GetDBDir was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDBDir.Lock()
	mock.calls.GetDBDir = append(mock.calls.GetDBDir, callInfo)
	mock.lockGetDBDir.Unlock()
	return mock.GetDBDirFunc()
}

// GetDBDirCalls gets all the calls that were made to GetDBDir.
// Check the length with:
//
//	len(mockedconfigService.GetDBDirCalls())
func (mock *configServiceMock) GetDBDirCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDBDir.RLock()
	calls = mock.calls.GetDBDir
	mock.lockGetDBDir.RUnlock()
	return calls
}

// Init calls InitFunc.
func (mock *configServiceMock) Init(a *app.App) error {
	if mock.InitFunc == nil {
		panic("configServiceMock.InitFunc: method is nil but configService.Init was just called")
	}
	callInfo := struct {
		A *app.App
	}{
		A: a,
	}
	mock.lockInit.Lock()
	mock.calls.Init = append(mock.calls.Init, callInfo)
	mock.lockInit.Unlock()
	return mock.InitFunc(a)
}

// InitCalls gets all the calls that were made to Init.
// Check the length with:
//
//	len(mockedconfigService.InitCalls())
func (mock *configServiceMock) InitCalls() []struct {
	A *app.App
} {
	var calls []struct {
		A *app.App
	}
	mock.lockInit.RLock()
	calls = mock.calls.Init
	mock.lockInit.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *configServiceMock) Name() string {
	if mock.NameFunc == nil {
		panic("configServiceMock.NameFunc: method is nil but configService.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockedconfigService.NameCalls())
func (mock *configServiceMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

// Ensure, that DBServiceMock does implement DBService.
// If this is not the case, regenerate this file with moq.
var _ DBService = &DBServiceMock{}

// DBServiceMock is a mock implementation of DBService.
//
//	func TestSomethingThatUsesDBService(t *testing.T) {
//
//		// make and configure a mocked DBService
//		mockedDBService := &DBServiceMock{
//			CloseFunc: func(ctx context.Context) error {
//				panic("mock out the Close method")
//			},
//			InitFunc: func(a *app.App) error {
//				panic("mock out the Init method")
//			},
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//			RunFunc: func(ctx context.Context) error {
//				panic("mock out the Run method")
//			},
//			TxUpdateFunc: func(f func(txn *badger.Txn) error) error {
//				panic("mock out the TxUpdate method")
//			},
//			TxViewFunc: func(f func(txn *badger.Txn) error) error {
//				panic("mock out the TxView method")
//			},
//		}
//
//		// use mockedDBService in code that requires DBService
//		// and then make assertions.
//
//	}
type DBServiceMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// InitFunc mocks the Init method.
	InitFunc func(a *app.App) error

	// NameFunc mocks the Name method.
	NameFunc func() string

	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context) error

	// TxUpdateFunc mocks the TxUpdate method.
	TxUpdateFunc func(f func(txn *badger.Txn) error) error

	// TxViewFunc mocks the TxView method.
	TxViewFunc func(f func(txn *badger.Txn) error) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Init holds details about calls to the Init method.
		Init []struct {
			// A is the a argument value.
			A *app.App
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// TxUpdate holds details about calls to the TxUpdate method.
		TxUpdate []struct {
			// F is the f argument value.
			F func(txn *badger.Txn) error
		}
		// TxView holds details about calls to the TxView method.
		TxView []struct {
			// F is the f argument value.
			F func(txn *badger.Txn) error
		}
	}
	lockClose    sync.RWMutex
	lockInit     sync.RWMutex
	lockName     sync.RWMutex
	lockRun      sync.RWMutex
	lockTxUpdate sync.RWMutex
	lockTxView   sync.RWMutex
}

// Close calls CloseFunc.
func (mock *DBServiceMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("DBServiceMock.CloseFunc: method is nil but DBService.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedDBService.CloseCalls())
func (mock *DBServiceMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Init calls InitFunc.
func (mock *DBServiceMock) Init(a *app.App) error {
	if mock.InitFunc == nil {
		panic("DBServiceMock.InitFunc: method is nil but DBService.Init was just called")
	}
	callInfo := struct {
		A *app.App
	}{
		A: a,
	}
	mock.lockInit.Lock()
	mock.calls.Init = append(mock.calls.Init, callInfo)
	mock.lockInit.Unlock()
	return mock.InitFunc(a)
}

// InitCalls gets all the calls that were made to Init.
// Check the length with:
//
//	len(mockedDBService.InitCalls())
func (mock *DBServiceMock) InitCalls() []struct {
	A *app.App
} {
	var calls []struct {
		A *app.App
	}
	mock.lockInit.RLock()
	calls = mock.calls.Init
	mock.lockInit.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *DBServiceMock) Name() string {
	if mock.NameFunc == nil {
		panic("DBServiceMock.NameFunc: method is nil but DBService.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockedDBService.NameCalls())
func (mock *DBServiceMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *DBServiceMock) Run(ctx context.Context) error {
	if mock.RunFunc == nil {
		panic("DBServiceMock.RunFunc: method is nil but DBService.Run was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(ctx)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedDBService.RunCalls())
func (mock *DBServiceMock) RunCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// TxUpdate calls TxUpdateFunc.
func (mock *DBServiceMock) TxUpdate(f func(txn *badger.Txn) error) error {
	if mock.TxUpdateFunc == nil {
		panic("DBServiceMock.TxUpdateFunc: method is nil but DBService.TxUpdate was just called")
	}
	callInfo := struct {
		F func(txn *badger.Txn) error
	}{
		F: f,
	}
	mock.lockTxUpdate.Lock()
	mock.calls.TxUpdate = append(mock.calls.TxUpdate, callInfo)
	mock.lockTxUpdate.Unlock()
	return mock.TxUpdateFunc(f)
}

// TxUpdateCalls gets all the calls that were made to TxUpdate.
// Check the length with:
//
//	len(mockedDBService.TxUpdateCalls())
func (mock *DBServiceMock) TxUpdateCalls() []struct {
	F func(txn *badger.Txn) error
} {
	var calls []struct {
		F func(txn *badger.Txn) error
	}
	mock.lockTxUpdate.RLock()
	calls = mock.calls.TxUpdate
	mock.lockTxUpdate.RUnlock()
	return calls
}

// TxView calls TxViewFunc.
func (mock *DBServiceMock) TxView(f func(txn *badger.Txn) error) error {
	if mock.TxViewFunc == nil {
		panic("DBServiceMock.TxViewFunc: method is nil but DBService.TxView was just called")
	}
	callInfo := struct {
		F func(txn *badger.Txn) error
	}{
		F: f,
	}
	mock.lockTxView.Lock()
	mock.calls.TxView = append(mock.calls.TxView, callInfo)
	mock.lockTxView.Unlock()
	return mock.TxViewFunc(f)
}

// TxViewCalls gets all the calls that were made to TxView.
// Check the length with:
//
//	len(mockedDBService.TxViewCalls())
func (mock *DBServiceMock) TxViewCalls() []struct {
	F func(txn *badger.Txn) error
} {
	var calls []struct {
		F func(txn *badger.Txn) error
	}
	mock.lockTxView.RLock()
	calls = mock.calls.TxView
	mock.lockTxView.RUnlock()
	return calls
}
