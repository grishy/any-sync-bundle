// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package lightcoordinatorstore

import (
	"github.com/anyproto/any-sync/app"
	"github.com/dgraph-io/badger/v4"
	"sync"
)

// Ensure, that dbServiceMock does implement dbService.
// If this is not the case, regenerate this file with moq.
var _ dbService = &dbServiceMock{}

// dbServiceMock is a mock implementation of dbService.
//
//	func TestSomethingThatUsesdbService(t *testing.T) {
//
//		// make and configure a mocked dbService
//		mockeddbService := &dbServiceMock{
//			InitFunc: func(a *app.App) error {
//				panic("mock out the Init method")
//			},
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//			TxUpdateFunc: func(f func(txn *badger.Txn) error) error {
//				panic("mock out the TxUpdate method")
//			},
//			TxViewFunc: func(f func(txn *badger.Txn) error) error {
//				panic("mock out the TxView method")
//			},
//		}
//
//		// use mockeddbService in code that requires dbService
//		// and then make assertions.
//
//	}
type dbServiceMock struct {
	// InitFunc mocks the Init method.
	InitFunc func(a *app.App) error

	// NameFunc mocks the Name method.
	NameFunc func() string

	// TxUpdateFunc mocks the TxUpdate method.
	TxUpdateFunc func(f func(txn *badger.Txn) error) error

	// TxViewFunc mocks the TxView method.
	TxViewFunc func(f func(txn *badger.Txn) error) error

	// calls tracks calls to the methods.
	calls struct {
		// Init holds details about calls to the Init method.
		Init []struct {
			// A is the a argument value.
			A *app.App
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// TxUpdate holds details about calls to the TxUpdate method.
		TxUpdate []struct {
			// F is the f argument value.
			F func(txn *badger.Txn) error
		}
		// TxView holds details about calls to the TxView method.
		TxView []struct {
			// F is the f argument value.
			F func(txn *badger.Txn) error
		}
	}
	lockInit     sync.RWMutex
	lockName     sync.RWMutex
	lockTxUpdate sync.RWMutex
	lockTxView   sync.RWMutex
}

// Init calls InitFunc.
func (mock *dbServiceMock) Init(a *app.App) error {
	if mock.InitFunc == nil {
		panic("dbServiceMock.InitFunc: method is nil but dbService.Init was just called")
	}
	callInfo := struct {
		A *app.App
	}{
		A: a,
	}
	mock.lockInit.Lock()
	mock.calls.Init = append(mock.calls.Init, callInfo)
	mock.lockInit.Unlock()
	return mock.InitFunc(a)
}

// InitCalls gets all the calls that were made to Init.
// Check the length with:
//
//	len(mockeddbService.InitCalls())
func (mock *dbServiceMock) InitCalls() []struct {
	A *app.App
} {
	var calls []struct {
		A *app.App
	}
	mock.lockInit.RLock()
	calls = mock.calls.Init
	mock.lockInit.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *dbServiceMock) Name() string {
	if mock.NameFunc == nil {
		panic("dbServiceMock.NameFunc: method is nil but dbService.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockeddbService.NameCalls())
func (mock *dbServiceMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

// TxUpdate calls TxUpdateFunc.
func (mock *dbServiceMock) TxUpdate(f func(txn *badger.Txn) error) error {
	if mock.TxUpdateFunc == nil {
		panic("dbServiceMock.TxUpdateFunc: method is nil but dbService.TxUpdate was just called")
	}
	callInfo := struct {
		F func(txn *badger.Txn) error
	}{
		F: f,
	}
	mock.lockTxUpdate.Lock()
	mock.calls.TxUpdate = append(mock.calls.TxUpdate, callInfo)
	mock.lockTxUpdate.Unlock()
	return mock.TxUpdateFunc(f)
}

// TxUpdateCalls gets all the calls that were made to TxUpdate.
// Check the length with:
//
//	len(mockeddbService.TxUpdateCalls())
func (mock *dbServiceMock) TxUpdateCalls() []struct {
	F func(txn *badger.Txn) error
} {
	var calls []struct {
		F func(txn *badger.Txn) error
	}
	mock.lockTxUpdate.RLock()
	calls = mock.calls.TxUpdate
	mock.lockTxUpdate.RUnlock()
	return calls
}

// TxView calls TxViewFunc.
func (mock *dbServiceMock) TxView(f func(txn *badger.Txn) error) error {
	if mock.TxViewFunc == nil {
		panic("dbServiceMock.TxViewFunc: method is nil but dbService.TxView was just called")
	}
	callInfo := struct {
		F func(txn *badger.Txn) error
	}{
		F: f,
	}
	mock.lockTxView.Lock()
	mock.calls.TxView = append(mock.calls.TxView, callInfo)
	mock.lockTxView.Unlock()
	return mock.TxViewFunc(f)
}

// TxViewCalls gets all the calls that were made to TxView.
// Check the length with:
//
//	len(mockeddbService.TxViewCalls())
func (mock *dbServiceMock) TxViewCalls() []struct {
	F func(txn *badger.Txn) error
} {
	var calls []struct {
		F func(txn *badger.Txn) error
	}
	mock.lockTxView.RLock()
	calls = mock.calls.TxView
	mock.lockTxView.RUnlock()
	return calls
}
