package pages

import (
	"fmt"
	"github.com/grishy/any-sync-bundle/adminui/admintypes"
	"github.com/grishy/any-sync-bundle/adminui/views/layouts"
)

// StorageOverviewPage renders the storage overview dashboard.
templ StorageOverviewPage(stats *admintypes.StorageStats, title string) {
	@layouts.Base(title, "storage", "", "") {
		<div class="container">
			<h2>Storage Overview</h2>
			if stats != nil {
				<div class="stats-grid">
					<div class="stat-card">
						<div class="stat-label">Total Storage Used</div>
						<div class="stat-value">{ admintypes.FormatBytes(stats.TotalBytesUsed) }</div>
						<div class="stat-icon">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4"></path>
							</svg>
						</div>
					</div>
					<div class="stat-card">
						<div class="stat-label">Total Files</div>
						<div class="stat-value">{ fmt.Sprintf("%d", stats.TotalFileCount) }</div>
						<div class="stat-icon">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
							</svg>
						</div>
					</div>
					<div class="stat-card">
						<div class="stat-label">Total CIDs</div>
						<div class="stat-value">{ fmt.Sprintf("%d", stats.TotalCidsCount) }</div>
						<div class="stat-icon">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"></path>
							</svg>
						</div>
					</div>
					<div class="stat-card">
						<div class="stat-label">Active Spaces</div>
						<div class="stat-value">{ fmt.Sprintf("%d", stats.TotalSpaces) }</div>
						<div class="stat-icon">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
							</svg>
						</div>
					</div>
					<div class="stat-card">
						<div class="stat-label">Total Users</div>
						<div class="stat-value">{ fmt.Sprintf("%d", stats.TotalUsers) }</div>
						<div class="stat-icon">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
							</svg>
						</div>
					</div>
					<div class="stat-card">
						<div class="stat-label">Avg Storage Per User</div>
						<div class="stat-value">
							if stats.TotalUsers > 0 {
								{ admintypes.FormatBytes(stats.TotalBytesUsed / uint64(stats.TotalUsers)) }
							} else {
								0 B
							}
						</div>
						<div class="stat-icon">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
							</svg>
						</div>
					</div>
				</div>
				<div class="card">
					<h3>Storage Breakdown</h3>
					<table class="table">
						<tr>
							<th>Metric</th>
							<th>Value</th>
							<th>Details</th>
						</tr>
						<tr>
							<td>Total Storage</td>
							<td><strong>{ admintypes.FormatBytes(stats.TotalBytesUsed) }</strong></td>
							<td>Across { fmt.Sprintf("%d", stats.TotalUsers) } users</td>
						</tr>
						<tr>
							<td>Total Files</td>
							<td><strong>{ fmt.Sprintf("%d", stats.TotalFileCount) }</strong></td>
							<td>Stored in { fmt.Sprintf("%d", stats.TotalSpaces) } spaces</td>
						</tr>
						<tr>
							<td>Total Content IDs</td>
							<td><strong>{ fmt.Sprintf("%d", stats.TotalCidsCount) }</strong></td>
							<td>Unique content identifiers</td>
						</tr>
						<tr>
							<td>Average Files per Space</td>
							<td>
								<strong>
									if stats.TotalSpaces > 0 {
										{ fmt.Sprintf("%.1f", float64(stats.TotalFileCount)/float64(stats.TotalSpaces)) }
									} else {
										0
									}
								</strong>
							</td>
							<td>Files distributed across spaces</td>
						</tr>
						<tr>
							<td>Average CIDs per File</td>
							<td>
								<strong>
									if stats.TotalFileCount > 0 {
										{ fmt.Sprintf("%.1f", float64(stats.TotalCidsCount)/float64(stats.TotalFileCount)) }
									} else {
										0
									}
								</strong>
							</td>
							<td>Content blocks per file</td>
						</tr>
					</table>
				</div>
			} else {
				<p>No storage data available</p>
			}
			<div class="actions">
				<a href="/admin/" class="button">Back to Dashboard</a>
			</div>
		</div>
	}
}
